<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function($rootScope, $scope, $timeout, $location, $log, $window, spUtil, nowAttachmentHandler, spAriaUtil, spNavStateManager) {
  $scope.submitting = false;
  $scope.mandatory = [];
  $scope.errorMessages = [];
  $scope.data.show_sql = false;
  $scope.saveButtonSuffix = spUtil.getAccelerator('s');
  $scope.isPageReady = false;
  $scope.embeddedInModal = false;
  $scope.adminMenu = {
    encodedPageUrl: encodeURIComponent($location.url()),
    getClientScriptCount: function() {
      var count = 0;
      if ($scope.data.f.client_script) {
        count += $scope.data.f.client_script.onChange.length;
        count += $scope.data.f.client_script.onLoad.length;
        count += $scope.data.f.client_script.onSubmit.length;
      }
      return count;
    }
  };
	var tableId = $scope.data.sys_id != -1 ? $scope.data.sys_id : ($scope.data.f ? $scope.data.f._attachmentGUID : -1);
	spUtil.recordWatch($scope, "sys_attachment", "table_sys_id=" + tableId, function (response, data) {
    $scope.attachmentHandler.getAttachmentList();
    if (response.data) {
        var options = {};
        options.operation = response.data.operation;
        options.filename = response.data.display_value;
	options.sys_id = tableId;
	options.table = $scope.data.table;
        options.state = (response.data.record && response.data.record.state) ? response.data.record.state.value : "";
        if (options.operation === 'update' && options.state === 'not_available')
         $rootScope.$broadcast("attachment.updated", options);
    }
});

  $rootScope.$on('$sp.html.editor.progress', function(e, conf) {
      $scope.submitting = conf.state;
  });

  $scope.getButtonClass = function(action) {
		if (action.form_style == "destructive")
			return "btn-danger";

		if (action.form_style == "primary")
			return "btn-primary";

		return "btn-default";
	};

  $scope.getUIActions = function(type) {
    if ($scope.data.disableUIActions)
      return [];
    if (type) {
      return $scope.data.f._ui_actions.filter(function(action) {
        //We handle the primary action button separately.
        return !action.primary && action['is_' + type];
      });
    } else {
      return $scope.data.f._ui_actions;
    }
  }

  $scope.getPrimaryAction = function() {
    var primaryActions = $scope.data.f._ui_actions.filter(function(action) {
      return action.primary;
    });
    return (primaryActions.length) ? primaryActions[0] : null;
  }

  $scope.getUIActionContextMenu = function(event) {
    var menu = [];
    if (event.ctrlKey)
      return menu;

    var contextActions = $scope.getUIActions('context');
    contextActions.forEach(function(action) {
      menu.push([action.name, function() {
        $scope.triggerUIAction(action);
      }]);
    });

    if (contextActions.length > 0)
      menu.push(null);
    menu.push([$scope.data.exportPDFMsg, function() {
      exportPDF("");
    }]);
    menu.push([$scope.data.exportPDFLandMsg, function() {
      exportPDF('true');
    }]);

    return menu;
  }

  function exportPDF(landscape) {
    $window.open("/" + $scope.data.f.table + ".do?PDF&landscape=" + landscape + "&sys_id=" + $scope.data.sys_id + "&sysparm_view=" + $scope.data.f.view);
  }

  //trigger the primary UI Action on save (if there is one)
  var deregister = $scope.$on('$sp.save', function() {
    var primaryAction = $scope.getPrimaryAction();
    if (primaryAction)
      $scope.triggerUIAction(primaryAction);
  });
  $scope.$on('$destroy', function() {
    deregister()
  });

  $scope.triggerUIAction = function(action) {
		if ($scope.data.disableUIActions && !action.primary) {
      return;
    }

    var activeElement = document.activeElement;
    if (activeElement) {
      activeElement.blur();
    }

    $scope.$evalAsync(function() {
      if (g_form) {
        $scope.submitting = true;
        if (!g_form.submit(action.action_name || action.sys_id))
          $scope.submitting = false;
      }
    });
  }

  $scope.$on("spModel.uiActionComplete", function(evt, response, savedFormSysId) {
    if (!response.isInsert &&  ($scope.data.sys_id !== savedFormSysId))
      return;

    $scope.submitting = false;
    if (response.isActionAborted)
      return;

    var sysID = (response.isInsert) ? response.sys_id : $scope.data.sys_id;
    loadForm($scope.data.table, sysID).then(constructResponseHandler(response));
  });

  function constructResponseHandler(response) {
    return function() {
	  $rootScope.$broadcast("sp.form.submitted", {sys_id: (response.isInsert) ? response.sys_id : $scope.data.sys_id});
      var message;
      var eventName = "sp.form.record.updated";
      if (response.isInsert) {
        message = $scope.data.recordAddedMsg;
        var search = $location.search();
        search.sys_id = response.sys_id;
        search.spa = 1;
        $location.search(search).replace();
      } else
        message = $scope.data.updatedMsg;

      $scope.data.hideRelatedLists = hideRelatedLists();
      $scope.$emit(eventName, $scope.data.f._fields, $scope.data.sys_id);
      $rootScope.$broadcast(eventName, $scope.data.f._fields, $scope.data.sys_id);
      $scope.status = message;
      spUtil.addTrivialMessage(message);
      spUtil.simulateFakeFormSubmitForAutoComplete('widget-form', $scope.data.f._fields);
      $timeout(clearStatus, 2000);
    }
  }

  var ctrl = this;
  // switch forms
  var unregister = $scope.$on('$sp.list.click', onListClick);
  $scope.$on("$destroy", function() {
    unregister();
  })

	function _save() {
		var primaryAction = $scope.getPrimaryAction();
    if (primaryAction)
      $scope.triggerUIAction(primaryAction);
	}

	function onListClick(evt, arg) {
		spUtil.clearMessages();
		loadForm(arg.table, arg.sys_id);
	}

  function loadForm(table, sys_id) {
    var f = {};
    $scope.data.table = f.table = table;
    $scope.data.sys_id = f.sys_id = sys_id;
    f.view = $scope.data.view;
    return $scope.server.update().then(setupAttachmentHandler);
  }

  function openRelatedList(e, queryString) {
    // todo: Open this in a modal
    $location.search(queryString);
    e.preventDefault();
  }

  $scope.$on('spModel.fields.rendered', function() {
    if (ctrl.panels)
      ctrl.panels.removeClass('shift-out').addClass('shift-in');
  });

	var g_form;
	function initForm(gFormInstance) {
              $scope.$evalAsync(function() {
		     if ($('#widget-form').parents('.modal').length)
		        $scope.embeddedInModal = true;
		})

		if (gFormInstance.getTableName() == $scope.data.f.table){
			g_form = gFormInstance;
			spNavStateManager.register($scope.data.table, _save, g_form);
			$scope.isPageReady = true;
			$timeout(function() {
				$rootScope.$emit('spModel.gForm.rendered', g_form);
			}, 175);
		}
	}

  $scope.$on('spModel.gForm.initialized', function(e, gFormInstance) {
		initForm(gFormInstance);
  });

	$scope.$on('spModel.gForm.env.created', function(e, gFormInstance) {
		initForm(gFormInstance);
  });

	// update the comments or worknotes based on activity stream
	$scope.$on("activity_stream_is_changed", function(event, data) {
		if (g_form && g_form.hasField(data.fieldName)) {
			g_form.setValue(data.fieldName, data.input);
			if (data.fieldToClear != "" && g_form.hasField(data.fieldToClear))
				g_form.setValue(data.fieldToClear, "");
		}
	})

  // Show or hide related lists
  $scope.$watch('data.f._related_lists', function() {
    $scope.data.hideRelatedLists = hideRelatedLists();
  }, true);

	$scope.hideDuplicateSaveAction = function (item) {
		if (!$scope.data.advancedUIEnabled)
			return true;
		return ($scope.data.advancedUIEnabled && item.sys_id !== "432ace8b0a0a0b34006b02832660c894" && item.sys_id !== "42e780d40a0a0b34007e0d4a52d33405");
	};

  function hideRelatedLists() {
    if (!$scope.data.f._related_lists)
      return true;
    if ($scope.options.hideRelatedLists == true)
      return true;
    if ($scope.data.sys_id == '-1')
      return true;
    // If all related lists are visible=false then hide
    if ($scope.data.f._related_lists.length > 0) {
      for (var i in $scope.data.f._related_lists) {
        var list = $scope.data.f._related_lists[i];
        if (list.visible) {
          return false;
        }
      }
    }
    return true;
  }

  function clearStatus() {
    $scope.status = "";
  }

  function setupAttachmentHandler() {
    $scope.attachmentHandler = new nowAttachmentHandler(appendDone, appendError);

		$scope.$evalAsync(function() {
			$scope.attachmentHandler.setParams($scope.data.table, $scope.data.f._attachmentGUID, 1024 * 1024 * $scope.data.maxAttachmentSize);
		});

    $scope.$on('dialog.upload_too_large.show', function(e) {
      $log.error($scope.data.largeAttachmentMsg);
      spUtil.addErrorMessage($scope.data.largeAttachmentMsg);
    });
  }
  setupAttachmentHandler();

  function appendDone() {
    // don't know here whether upload succeeded, so can't show msg either way
    $scope.$broadcast("sp.attachments.update", $scope.data.f._attachmentGUID);
    spUtil.retrieveSessionMessages();
  }

  function appendError(error) {
    $scope.errorMessages.push(error);
    spUtil.addErrorMessage(error.msg + error.fileName);
  }

  if ($scope.data.f.title) {
	  $scope.$emit('sp.widget-modal.set-aria-label', $scope.data.f.title);
  }
}]]></client_script>
        <controller_as>c</controller_as>
        <css>/* styles.css */

.field-has-reference .add-on {
    vertical-align: middle;
    display: table-cell;
    width: 3.6rem;
    display: none;
}

span.field-decorations {
    display: none;
}

.vba167a0a932a421094e3f15a7bba1042 .btn-primary {
    background-color: #34829f;
}

.input-group-addon SELECT, .msie10 .input-group-addon SELECT, .msie11 .input-group-addon SELECT, .windows.chrome .input-group-addon SELECT {
    border: .1rem solid #939393;
    border-right: none;
    padding-left: 13px;
    border-radius: 20px 0px 0px 20px;
}

div.select2-container .select2-choice {
    padding-left: .8rem;
    display: flex;
    line-height: 3.2rem;
    align-items: center;
}

.btn-form-menu {
    vertical-align: inherit;
    padding: inherit;
    background: none;
}

label.field-label.field-label-question {
    color: #317a9e;
}

button.btn.btn-default {
    background: #34829f;
    display: flex;
    align-items: center;
}

.asterisk-div.ng-scope {
    display: none;
}

.vba167a0a932a421094e3f15a7bba1042 input#sp_formfield_number {
    border-radius: 2rem;
    border: 1px solid #327d9e;
}

legend, .sp-form-container .form-container-caption {
    border: none;
    color: inherit;
    display: inline-block;
    max-width: 100%;
    margin-bottom: 2.5rem;
    font-size: inherit;
    font-weight: normal;
}

.panel-title {
    word-wrap: break-word;
}

.panel-default {
    /* border-color: #ddd; */
    border: none;
    background: none;
    margin-top: -18px;
}

.form-control {
    display: block;
    width: 100%;
    height: 3.4rem;
    border: 1px solid #327d9e;
    padding: .6rem 1.2rem;
    font-size: 1.4rem;
    line-height: 1.42857;
    color: #555555;
    background-color: #fff;
    background-image: none;
    border-radius: 20px;
    -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);
    box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);
    -webkit-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
    -o-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
    transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
}

input#sp_formfield_number {
    border-radius: 20px;
}

.field-has-reference {
    border-radius: 20px;
    table-layout: fixed;
    width: 100%;
    border: 1px solid #317b9e;
}

.select2-container .select2-choice .select2-arrow {
    background-color: transparent;
    border-left: .1rem solid #939393;
    display: none;
}

.field-has-reference .reference .select2-container a.select2-choice {
    height: 3.2rem;
    min-height: 3.2rem;
    background: none;
    border: none;
    display: flex;
    width: 31rem;
    border-radius: 2rem;
    align-items: center;
}

.panel-body {
    padding: 2.5rem;
    border: none;
    background: #fff;
    box-shadow: rgba(50, 50, 93, 0.25) 0px 13px 27px -5px, rgba(0, 0, 0, 0.3) 0px 8px 16px -8px;
    border-radius: 22px;
    left: 0px !important;
}

span#container_82d57a5b93a9421094e3f15a7bba10bd {
    font-size: 28px;
    color: #337f9f;
    font-weight: 600;
}

.panel-heading .dropdown-menu a {
    white-space: normal;
    display: flex;
    justify-content: space-between;
}

.panel-heading .dropdown-menu a .badge {
    align-self: baseline;
    min-width: auto;
}

.sc-field-error-label {
    margin-right: .5em;
    display: inline-block;
    background-color: $sc-field-error-color;
}

.comment {
    font-weight: bold;
    margin-top: 2px;
    margin-bottom: 2px;
}

.action-btn {
    margin-right: 5px;
}

.timeline-container {
    max-height: 50vh;
    height: 100%;
    overflow-y: auto;
}

.panel .panel {
    height: auto !important;
}

.attachment-button .glyphicon-paperclip {
    font-size: 18px;
}

.empty-state-wrapper {
    width: 100%;
    height: 100%;
    align-items: center;
    display: flex;
    flex-direction: column;
    padding: 10vh 20px 20px;
}

.empty-state-wrapper .empty-state {
    border: 1px solid #e7e9eb;
    border-radius: 10px;
    max-width: 700px;
    padding: 30px 40px 20px;
    position: relative;
}

.empty-state-wrapper .empty-state .empty-state-badge {
    top: -36px;
    left: 50%;
    position: absolute;
    height: 72px;
    width: 72px;
    align-items: center;
    border-radius: 100%;
    color: #ffffff;
    display: flex;
    font-size: 40px;
    justify-content: center;
    margin-left: -36px;
    text-align: center;
}

.empty-state-wrapper .empty-state .empty-state-header {
    font-size: 30px;
    text-align: center;
    color: #343d47;
}

.empty-state-wrapper .empty-state .empty-state-content ul {
    list-style: disc outside;
    margin: 0 0 10px 0;
    padding: 0 0 0 30px;
}

.text-success-alt {
    background-color: $state-success-text;
}

.text-info-alt {
    background-color: $state-info-text;
}

.sp-cross-scope-msg {
    margin-bottom: 10px;
}

.asterisk-div {
    margin: 2rem 0 1.5rem;
}

.asterisk {
    padding-right: .25rem;
}

.related-lists-vertical-bar {
    padding: 0 .5em;
}

.tox .tox-statusbar {
    border-color: $input-border;
}

.tox .tox-toolbar__primary {
    background: none;
    border-bottom: 1px solid $input-border;
}

.tox.tox-tinymce {
    border-color: $input-border;
}

/* Styling for the button */
.btn {
    display: inline-block;
    padding: 10px 20px;
    font-size: 16px;
    font-weight: bold;
    text-align: center;
    white-space: nowrap;
    vertical-align: middle;
    user-select: none;
    border: 1px solid transparent;
    border-radius: 1.5rem;
    background-color: #007bff;
    color: #fff;
    cursor: pointer;
    transition: background-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

.btn-primary {
    background-color: #327f9f;
}

.btn-primary:hover {
    background-color: #fc9f50;
}

/* Styling for the disabled button */
.btn:disabled,
.btn[disabled] {
    cursor: not-allowed;
    opacity: 0.65;
    filter: alpha(opacity=65);
}

h1,
.h1 {
    font-size: 4.6rem;
    text-align: left;
    font-weight: 600;
    color: transparent;
    background-image: radial-gradient(ellipse, #52c8ff, #1f827b);
    font-style: normal;
    -webkit-background-clip: text;
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>item_form2</id>
        <internal>false</internal>
        <link><![CDATA[function link(){
	setTimeout(function(){
	$('#adminMenu, #platformLink').tooltip();
});
}]]></link>
        <name>item form2</name>
        <option_schema>[{"name":"disableUIActions","section":"Behavior","label":"Disable UI Actions on Form","type":"boolean"},{"name":"showFormView","section":"Behavior","label":"Display current form view","type":"boolean"},{"name":"omitHeaderOptions","section":"Behavior","label":"Omit header options icon","type":"boolean"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function($sp, input, data, options, gs) {
  // Messages and settings
  data.attachmentUploadSuccessMsg = gs.getMessage("Attachment upload was successful");
  data.recordAddedMsg = gs.getMessage("Record Added");
  data.updatedMsg = gs.getMessage("Record Updated");
  data.addAttachmentMsg = gs.getMessage("Add an attachment");
  data.supportedAttachmentExtensions = gs.getProperty("glide.attachment.extensions", '');
  data.maxAttachmentSize = parseInt(gs.getProperty("com.glide.attachment.max_size", 1024));
  if (isNaN(data.maxAttachmentSize))
    data.maxAttachmentSize = 24;
  data.largeAttachmentMsg = gs.getMessage("Attached files must be smaller than {0} - please try again", "" + data.maxAttachmentSize + "MB");

  // Admin check and other settings
  data.isAdmin = gs.hasRightsTo('sp/configure.all/execute', null);
  data.emptyStateTemplate = options.empty_state_template;
  var isPopup = false;

  if (input) {
    data.table = input.table || 'x_1383184_charityb_item'; // Set your table
    data.sys_id = input.sys_id;
    data.view = input.view;
    var result = {};
    if (input._fields) {
      result = $sp.saveRecord(data.table, input.sys_id, input._fields);
      data.sys_id = result.sys_id;
    }

    if (input.sys_id == '-1')
      data.isNewRecord = true;
    if (input.isPopup === true)
      isPopup = true;
  } else {
    data.table = options.table || $sp.getParameter("t") || 'x_1383184_charityb_item'; // Set your table
    data.sys_id = options.sys_id || $sp.getParameter("sys_id");
    if (!data.sys_id && options.sys_id_required != "true")
      data.sys_id = "-1";
    data.view = options.view || $sp.getParameter("view"); // no default
  }

  if (!data.table) return;

  if (data.table == "sys_attachment") {
    data.tableUnsupported = true;
    return;
  }

  if (!data.sys_id) return;

  var gr = new GlideRecord(data.table);

  if (data.sys_id != "-1") {
    if (!gr.get(data.sys_id)) {
      data.isValid = false;
      return;
    }
    if (!gr.canRead()) return; // can't see requested record
  }

  if (data.sys_id == "-1" && !gr.canCreate()) return; // can't create a new record

  data.isValid = data.sys_id == "-1" || gr.isValid();
  if (!data.isValid) return;

  data.table = gr.getRecordClassName();
  data.canWrite = gr.canWrite();
  var hasRecordAccess = data.sys_id == "-1" ? gr.canCreate() : data.canWrite;
  data.canAttach = !options.omitAttachmentButton && hasRecordAccess && gs.hasRole(gs.getProperty('glide.attachment.role')) && gr.isValidField('attachment');

  data.f = $sp.getForm(data.table, data.sys_id, data.query, data.view, isPopup);

  var policies = data.f.policy || []
  policies.forEach(function(policy, index) {
    if (policy['is_ui_data_policy']) {
      policies[index].onload = true;
    }
  });

  for (var f in data.f._formatters) {
    var fm = data.f._formatters[f];
    if (fm.formatter == "activity.xml") {
      fm.hardcoded = true;
      fm.widgetInstance = $sp.getWidget('widget-ticket-conversation', {
        table: data.table,
        sys_id: data.sys_id,
        includeExtended: true,
        hideAttachmentBtn: true,
        title: "${Activity}",
        use_dynamic_placeholder: true,
        btnLabel: "${Post}"
      });
    } else if (fm.formatter == "com_glideapp_servicecatalog_veditor" || fm.formatter == "com_glideapp_questionset_default_question_editor") {
      var qsConfig = $sp.getValue('quick_start_config');
      if (qsConfig) qsConfig = JSON.parse(qsConfig)[0];
      fm.widgetInstance = $sp.getWidget(fm.widget, {
        table: data.table,
        sys_id: data.sys_id,
        readonly_variable_editor: qsConfig ? qsConfig.readonly_variable_editor : 'false'
      });
    } else {
      fm.widgetInstance = $sp.getWidget(fm.widget, data);
    }
  }

  // Fetching and displaying data
  if (data.isValid) {
    // Adjust fields according to your x_1383184_charityb_item table schema
    data.item = {
      itemName: gr.getValue('name'),
      itemDescription: gr.getValue('description'),
      donator: gr.getValue('donator'),
      startDate: gr.getDisplayValue('start_date'),
      endDate: gr.getDisplayValue('end_date'),
      category: gr.getValue('category'),
      value: gr.getValue('value'),
      startBidAmount: gr.getValue('start_bid_amount'),
      highestBidAmount: gr.getValue('highest_bid_amount'),
      image: gr.getValue('image'),
      donatorLocation: gr.getValue('donator_location')
      // Add additional fields as needed
    };
  }
})($sp, input, data, options, gs);
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>lalitha</sys_created_by>
        <sys_created_on>2024-06-14 05:59:15</sys_created_on>
        <sys_id>4c2d1a1993b6061094e3f15a7bba103a</sys_id>
        <sys_mod_count>10</sys_mod_count>
        <sys_name>item form2</sys_name>
        <sys_package display_value="CharityBids" source="x_1383184_charityb">bcaeeadb9369421094e3f15a7bba1090</sys_package>
        <sys_policy/>
        <sys_scope display_value="CharityBids">bcaeeadb9369421094e3f15a7bba1090</sys_scope>
        <sys_update_name>sp_widget_4c2d1a1993b6061094e3f15a7bba103a</sys_update_name>
        <sys_updated_by>lalitha</sys_updated_by>
        <sys_updated_on>2024-06-18 08:57:32</sys_updated_on>
        <template><![CDATA[<div ng-if="!data.isValid && !data.emptyStateTemplate" class="panel panel-default">
  <div class="panel-body wrapper-lg text-center">
    <span ng-if="!data.tableUnsupported">${Record not found}</span>
    <span ng-if="data.tableUnsupported">${Form view not supported for requested table}</span>
  </div>
</div>

<div ng-if="!data.isValid && data.emptyStateTemplate" class="panel-shift">
  <div class="empty-state-wrapper panel panel-default" ng-include="data.emptyStateTemplate"></div>
</div>

<div ng-if="data.isValid" class="panel-shift">
  <h2>Create New Item</h2>
  <form id="itemForm" ng-submit="submitItem()">
    <!-- Nav tabs -->
    <ul class="nav nav-tabs" role="tablist">
      <li role="presentation" class="active"><a href="#basicInfo" aria-controls="basicInfo" role="tab" data-toggle="tab">Basic Information</a></li>
      <li role="presentation"><a href="#auctionDetails" aria-controls="auctionDetails" role="tab" data-toggle="tab">Auction Details</a></li>
      <li role="presentation"><a href="#auctionStatus" aria-controls="auctionStatus" role="tab" data-toggle="tab">Auction Status</a></li>
    </ul>

    <!-- Tab panes -->
    <div class="tab-content">
      <!-- Basic Information Tab -->
      <div role="tabpanel" class="tab-pane active" id="basicInfo">
        <br>
        <label for="itemName">Item Name:</label><br>
        <input type="text" id="itemName" name="itemName" class="form-control" ng-model="newItem.itemName" required><br>

        <label for="itemDescription">Description:</label><br>
        <textarea id="itemDescription" name="itemDescription" class="form-control" ng-model="newItem.itemDescription"></textarea><br>

        <label for="donator">Donator:</label><br>
        <input type="text" id="donator" name="donator" class="form-control" ng-model="newItem.donator"><br>

        <label for="startDate">Start Date:</label><br>
        <input type="date" id="startDate" name="startDate" class="form-control" ng-model="newItem.startDate"><br>

        <label for="endDate">End Date:</label><br>
        <input type="date" id="endDate" name="endDate" class="form-control" ng-model="newItem.endDate"><br>
      </div>

      <!-- Auction Details Tab -->
      <div role="tabpanel" class="tab-pane" id="auctionDetails">
        <br>
        <label for="category">Category:</label><br>
        <input type="text" id="category" name="category" class="form-control" ng-model="newItem.category"><br>

        <label for="value">Value:</label><br>
        <input type="number" id="value" name="value" class="form-control" ng-model="newItem.value"><br>

        <label for="startBidAmount">Starting Bid Amount:</label><br>
        <input type="number" id="startBidAmount" name="startBidAmount" class="form-control" ng-model="newItem.startBidAmount"><br>

        <label for="highestBidAmount">Highest Bid Amount:</label><br>
        <input type="number" id="highestBidAmount" name="highestBidAmount" class="form-control" ng-model="newItem.highestBidAmount"><br>

        <label for="image">Image URL:</label><br>
        <input type="url" id="image" name="image" class="form-control" ng-model="newItem.image"><br>
      </div>

      <!-- Auction Status Tab -->
      <div role="tabpanel" class="tab-pane" id="auctionStatus">
        <br>
        <label for="donatorLocation">Donator Location:</label><br>
        <input type="text" id="donatorLocation" name="donatorLocation" class="form-control" ng-model="newItem.donatorLocation"><br>
      </div>
    </div>

    <button type="submit" class="btn btn-primary">Create Item</button>
  </form>
  <div id="message">{{status}}</div>
</div>
]]></template>
    </sp_widget>
</record_update>
