<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function ($rootScope, $scope, $timeout, $location, $log, $window, spUtil, nowAttachmentHandler, spAriaUtil, spNavStateManager) {
    $scope.submitting = false;
    $scope.mandatory = [];
    $scope.errorMessages = [];
    $scope.data.show_sql = false;
    $scope.saveButtonSuffix = spUtil.getAccelerator('s');
    $scope.isPageReady = false;
    $scope.embeddedInModal = false;
    $scope.adminMenu = {
        encodedPageUrl: encodeURIComponent($location.url()),
        getClientScriptCount: function () {
            var count = 0;
            if ($scope.data.f.client_script) {
                count += $scope.data.f.client_script.onChange.length;
                count += $scope.data.f.client_script.onLoad.length;
                count += $scope.data.f.client_script.onSubmit.length;
            }
            return count;
        }
    };

    var tableId = $scope.data.sys_id != -1 ? $scope.data.sys_id : ($scope.data.f ? $scope.data.f._attachmentGUID : -1);
    spUtil.recordWatch($scope, "sys_attachment", "table_sys_id=" + tableId, function (response, data) {
        $scope.attachmentHandler.getAttachmentList();
        if (response.data) {
            var options = {};
            options.operation = response.data.operation;
            options.filename = response.data.display_value;
            options.sys_id = tableId;
            options.table = $scope.data.table;
            options.state = (response.data.record && response.data.record.state) ? response.data.record.state.value : "";
            if (options.operation === 'update' && options.state === 'not_available') {
                $rootScope.$broadcast("attachment.updated", options);
            }
        }
    });

    $rootScope.$on('$sp.html.editor.progress', function (e, conf) {
        $scope.submitting = conf.state;
    });

    $scope.getButtonClass = function (action) {
        if (action.form_style == "destructive")
            return "btn-danger";
        if (action.form_style == "primary")
            return "btn-primary";
        return "btn-default";
    };

    $scope.getUIActions = function (type) {
        if ($scope.data.disableUIActions)
            return [];
        if (type) {
            return $scope.data.f._ui_actions.filter(function (action) {
                return !action.primary && action['is_' + type];
            });
        } else {
            return $scope.data.f._ui_actions;
        }
    };

    $scope.getPrimaryAction = function () {
        var primaryActions = $scope.data.f._ui_actions.filter(function (action) {
            return action.primary;
        });
        return (primaryActions.length) ? primaryActions[0] : null;
    };

    $scope.getUIActionContextMenu = function (event) {
        var menu = [];
        if (event.ctrlKey)
            return menu;

        var contextActions = $scope.getUIActions('context');
        contextActions.forEach(function (action) {
            menu.push([action.name, function () {
                $scope.triggerUIAction(action);
            }]);
        });

        if (contextActions.length > 0)
            menu.push(null);
        menu.push([$scope.data.exportPDFMsg, function () {
            exportPDF("");
        }]);
        menu.push([$scope.data.exportPDFLandMsg, function () {
            exportPDF('true');
        }]);

        return menu;
    };

    function exportPDF(landscape) {
        $window.open("/" + $scope.data.f.table + ".do?PDF&landscape=" + landscape + "&sys_id=" + $scope.data.sys_id + "&sysparm_view=" + $scope.data.f.view);
    }

    // Trigger the primary UI Action on save (if there is one)
    var deregister = $scope.$on('$sp.save', function () {
        var primaryAction = $scope.getPrimaryAction();
        if (primaryAction)
            $scope.triggerUIAction(primaryAction);
    });

    $scope.$on('$destroy', function () {
        deregister();
    });

    $scope.triggerUIAction = function (action) {
        if ($scope.data.disableUIActions && !action.primary) {
            return;
        }

        var activeElement = document.activeElement;
        if (activeElement) {
            activeElement.blur();
        }

        $scope.$evalAsync(function () {
            if (g_form) {
                $scope.submitting = true;
                if (!g_form.submit(action.action_name || action.sys_id))
                    $scope.submitting = false;
            }
        });
    };

    $scope.$on("spModel.uiActionComplete", function (evt, response, savedFormSysId) {
        if (!response.isInsert && ($scope.data.sys_id !== savedFormSysId))
            return;

        $scope.submitting = false;
        if (response.isActionAborted)
            return;

        var sysID = (response.isInsert) ? response.sys_id : $scope.data.sys_id;
        loadForm($scope.data.table, sysID).then(constructResponseHandler(response));
    });

    function constructResponseHandler(response) {
        return function () {
            $rootScope.$broadcast("sp.form.submitted", { sys_id: (response.isInsert) ? response.sys_id : $scope.data.sys_id });
            var message;
            var eventName = "sp.form.record.updated";
            if (response.isInsert) {
                message = $scope.data.recordAddedMsg;
                var search = $location.search();
                search.sys_id = response.sys_id;
                search.spa = 1;
                $location.search(search).replace();
            } else
                message = $scope.data.updatedMsg;

            $scope.data.hideRelatedLists = hideRelatedLists();
            $scope.$emit(eventName, $scope.data.f._fields, $scope.data.sys_id);
            $rootScope.$broadcast(eventName, $scope.data.f._fields, $scope.data.sys_id);
            $scope.status = message;
            spUtil.addTrivialMessage(message);
            spUtil.simulateFakeFormSubmitForAutoComplete('widget-form', $scope.data.f._fields);
            $timeout(clearStatus, 2000);
        };
    }

    var ctrl = this;
    // Switch forms
    var unregister = $scope.$on('$sp.list.click', onListClick);
    $scope.$on("$destroy", function () {
        unregister();
    });

    function _save() {
        var primaryAction = $scope.getPrimaryAction();
        if (primaryAction)
            $scope.triggerUIAction(primaryAction);
    }

    function onListClick(evt, arg) {
        spUtil.clearMessages();
        loadForm(arg.table, arg.sys_id);
    }

    function loadForm(table, sys_id) {
        var f = {};
        $scope.data.table = f.table = table;
        $scope.data.sys_id = f.sys_id = sys_id;
        f.view = $scope.data.view;
        return $scope.server.update().then(setupAttachmentHandler);
    }

    function openRelatedList(e, queryString) {
        // todo: Open this in a modal
        $location.search(queryString);
        e.preventDefault();
    }

    $scope.$on('spModel.fields.rendered', function () {
        if (ctrl.panels)
            ctrl.panels.removeClass('shift-out').addClass('shift-in');
    });

    var g_form;

    function initForm(gFormInstance) {
        $scope.$evalAsync(function () {
            if ($('#widget-form').parents('.modal').length)
                $scope.embeddedInModal = true;
        });

        if (gFormInstance.getTableName() == $scope.data.f.table) {
            g_form = gFormInstance;
            spNavStateManager.register($scope.data.table, _save, g_form);
            $scope.isPageReady = true;
            $timeout(function () {
                $rootScope.$emit('spModel.gForm.rendered', g_form);
            }, 175);
        }
    }

    $scope.$on('spModel.gForm.initialized', function (e, gFormInstance) {
        initForm(gFormInstance);
    });

    $scope.$on('spModel.gForm.env.created', function (e, gFormInstance) {
        initForm(gFormInstance);
    });

    // Update the comments or worknotes based on activity stream
    $scope.$on("activity_stream_is_changed", function (event, data) {
        if (g_form && g_form.hasField(data.fieldName)) {
            g_form.setValue(data.fieldName, data.input);
            if (data.fieldToClear != "" && g_form.hasField(data.fieldToClear))
                g_form.setValue(data.fieldToClear, "");
        }
    });

    // Show or hide related lists
    $scope.$watch('data.f._related_lists', function () {
        $scope.data.hideRelatedLists = hideRelatedLists();
    }, true);

    $scope.hideDuplicateSaveAction = function (item) {
        if (!$scope.data.advancedUIEnabled)
            return true;
        return ($scope.data.advancedUIEnabled && item.sys_id !== "432ace8b0a0a0b34006b02832660c894" && item.sys_id !== "42e780d40a0a0b34007e0d4a52d33405");
    };

    function hideRelatedLists() {
        if (!$scope.data.f._related_lists)
            return true;
        if ($scope.options.hideRelatedLists == true)
            return true;
        if ($scope.data.sys_id == '-1')
            return true;
        // If all related lists are visible=false then hide
        if ($scope.data.f._related_lists.length > 0) {
            for (var i in $scope.data.f._related_lists) {
                var list = $scope.data.f._related_lists[i];
                if (list.visible) {
                    return false;
                }
            }
        }
        return true;
    }

    function clearStatus() {
        $scope.status = "";
    }

    function setupAttachmentHandler() {
        $scope.attachmentHandler = new nowAttachmentHandler(appendDone, appendError);

        $scope.$evalAsync(function () {
            $scope.attachmentHandler.setParams($scope.data.table, $scope.data.f._attachmentGUID, 1024 * 1024 * $scope.data.maxAttachmentSize);
        });

        $scope.$on('dialog.upload_too_large.show', function (e) {
            $log.error($scope.data.largeAttachmentMsg);
            spUtil.addErrorMessage($scope.data.largeAttachmentMsg);
        });
    }
    setupAttachmentHandler();

    function appendDone() {
        // Don't know here whether upload succeeded, so can't show msg either way
        $scope.$broadcast("sp.attachments.update", $scope.data.f._attachmentGUID);
        spUtil.retrieveSessionMessages();
    }

    function appendError(error) {
        $scope.errorMessages.push(error);
        spUtil.addErrorMessage(error.msg + error.fileName);
    }

    if ($scope.data.f.title) {
        $scope.$emit('sp.widget-modal.set-aria-label', $scope.data.f.title);
    }
};
]]></client_script>
        <controller_as>c</controller_as>
        <css>.container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
}

.panel {
    margin-bottom: 20px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.panel-heading {
    background-color: #f5f5f5;
    padding: 10px;
    border-bottom: 1px solid #ddd;
}

.panel-title {
    font-size: 18px;
    font-weight: bold;
}

.panel-body {
    padding: 20px;
}

.form-group {
    margin-bottom: 15px;
}

label {
    font-weight: bold;
}

input[type="text"],
input[type="number"],
textarea {
    width: 100%;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
    font-size: 14px;
}

textarea {
    resize: vertical; /* Allow vertical resize */
}

.btn {
    padding: 10px 20px;
    font-size: 16px;
    cursor: pointer;
    background-color: #337ab7;
    color: #fff;
    border: none;
    border-radius: 4px;
}

.btn-primary {
    background-color: #5cb85c;
}

.btn-primary:hover,
.btn-primary:focus {
    background-color: #4cae4c;
}

.alert {
    padding: 15px;
    margin-bottom: 20px;
    border: 1px solid transparent;
    border-radius: 4px;
}

.alert-info {
    background-color: #d9edf7;
    border-color: #bce8f1;
    color: #31708f;
}

.alert-info p {
    margin-bottom: 0;
}

.read-only-message {
    margin-bottom: 20px;
}

.asterisk-div {
    margin-top: 10px;
}

.fa-asterisk {
    color: #f00; /* Red color for asterisk */
}

/* Additional styles as needed */

/* Media queries for responsiveness (example) */
@media (max-width: 768px) {
    .container {
        padding: 10px;
    }
    
    .btn {
        font-size: 14px;
    }
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>cb_bid_form</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Bid form</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function($sp, input, data, options, gs) {
    // Messages and settings
    data.attachmentUploadSuccessMsg = gs.getMessage("Attachment upload was successful");
    data.recordAddedMsg = gs.getMessage("Record Added");
    data.updatedMsg = gs.getMessage("Record Updated");
    data.addAttachmentMsg = gs.getMessage("Add an attachment");
    data.supportedAttachmentExtensions = gs.getProperty("glide.attachment.extensions", '');
    data.maxAttachmentSize = parseInt(gs.getProperty("com.glide.attachment.max_size", 1024));
    if (isNaN(data.maxAttachmentSize)) {
        data.maxAttachmentSize = 24;
    }
    data.largeAttachmentMsg = gs.getMessage("Attached files must be smaller than {0} - please try again", "" + data.maxAttachmentSize + "MB");

    
    data.isAdmin = gs.hasRole('admin'); 
    data.emptyStateTemplate = options.empty_state_template;
    var isPopup = false;

    if (input) {
        data.table = input.table || 'x_1383184_charityb_bid'; 
        data.sys_id = input.sys_id;
        data.view = input.view;
        var result = {};
        if (input._fields) {
            result = $sp.saveRecord(data.table, input.sys_id, input._fields);
            data.sys_id = result.sys_id;
        }

        if (input.sys_id == '-1') {
            data.isNewRecord = true;
        }
        if (input.isPopup === true) {
            isPopup = true;
        }
    } else {
        data.table = options.table || $sp.getParameter("t") || 'x_1383184_charityb_bid'; 
        data.sys_id = options.sys_id || $sp.getParameter("sys_id");
        if (!data.sys_id && options.sys_id_required !== "true") {
            data.sys_id = "-1";
        }
        data.view = options.view || $sp.getParameter("view");
    }

    if (!data.table) {
        return;
    }

    if (data.table == "sys_attachment") {
        data.tableUnsupported = true;
        return;
    }

    if (!data.sys_id) {
        return;
    }

    var gr = new GlideRecord(data.table);

    if (data.sys_id != "-1") {
        if (!gr.get(data.sys_id)) {
            data.isValid = false;
            return;
        }
        if (!gr.canRead()) {
            data.isValid = false;
            return; // can't see requested record
        }
    }

    if (data.sys_id == "-1" && !gr.canCreate()) {
        data.isValid = false;
        return; // can't create a new record
    }

    data.isValid = data.sys_id == "-1" || gr.isValid();
    if (!data.isValid) {
        return;
    }

    data.table = gr.getRecordClassName();
    data.canWrite = gr.canWrite();
    var hasRecordAccess = data.sys_id == "-1" ? gr.canCreate() : data.canWrite;
    data.canAttach = !options.omitAttachmentButton && hasRecordAccess && gs.hasRole(gs.getProperty('glide.attachment.role')) && gr.isValidField('attachment');

    data.f = $sp.getForm(data.table, data.sys_id, data.query, data.view, isPopup);

    var policies = data.f.policy || [];
    policies.forEach(function(policy, index) {
        if (policy['is_ui_data_policy']) {
            policies[index].onload = true;
        }
    });

    for (var f in data.f._formatters) {
        var fm = data.f._formatters[f];
        if (fm.formatter == "activity.xml") {
            fm.hardcoded = true;
            fm.widgetInstance = $sp.getWidget('widget-ticket-conversation', {
                table: data.table,
                sys_id: data.sys_id,
                includeExtended: true,
                hideAttachmentBtn: true,
                title: "${Activity}",
                use_dynamic_placeholder: true,
                btnLabel: "${Post}"
            });
        } else if (fm.formatter == "com_glideapp_servicecatalog_veditor" || fm.formatter == "com_glideapp_questionset_default_question_editor") {
            var qsConfig = $sp.getValue('quick_start_config');
            if (qsConfig) {
                qsConfig = JSON.parse(qsConfig)[0];
            }
            fm.widgetInstance = $sp.getWidget(fm.widget, {
                table: data.table,
                sys_id: data.sys_id,
                readonly_variable_editor: qsConfig ? qsConfig.readonly_variable_editor : 'false'
            });
        } else {
            fm.widgetInstance = $sp.getWidget(fm.widget, data);
        }
    }

    
    if (data.isValid) {
      
        data.bid = {
            bidder: gr.getDisplayValue('bidder'), 
            bidAmount: gr.getValue('bid_amount'),
            itemName: gr.getValue('item_name'),
            startBidAmount: gr.getValue('start_bid_amount'),
            highestBidAmount: gr.getValue('highest_bid_amount')
        };
    }

    // Return data object back to client script
    return data;

})($sp, input, data, options, gs);
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>lalitha</sys_created_by>
        <sys_created_on>2024-06-18 08:58:19</sys_created_on>
        <sys_id>c67ce76e9336021094e3f15a7bba10f0</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name>Bid form</sys_name>
        <sys_package display_value="CharityBids" source="x_1383184_charityb">bcaeeadb9369421094e3f15a7bba1090</sys_package>
        <sys_policy/>
        <sys_scope display_value="CharityBids">bcaeeadb9369421094e3f15a7bba1090</sys_scope>
        <sys_update_name>sp_widget_c67ce76e9336021094e3f15a7bba10f0</sys_update_name>
        <sys_updated_by>lalitha</sys_updated_by>
        <sys_updated_on>2024-06-18 09:12:22</sys_updated_on>
        <template><![CDATA[<div class="container">
    <h1>Bid Form</h1>

    <!-- Existing ServiceNow conditionals -->
    <div ng-if="::!data.isValid && !data.emptyStateTemplate" class="panel panel-default">
        <div class="panel-body wrapper-lg text-center">
            <span ng-if="!data.tableUnsupported">${Record not found}</span>
            <span ng-if="data.tableUnsupported">${Form view not supported for requested table}</span>
        </div>
    </div>

    <div ng-if="!data.isValid && data.emptyStateTemplate" class="panel-shift">
        <div class="empty-state-wrapper panel panel-default" ng-include="data.emptyStateTemplate"></div>
    </div>

    <div ng-if="data.isValid" class="panel-shift">
        <!-- Existing ServiceNow conditionals for form view -->
        <div class="" ng-if="!data.f._view.length && data.hideRelatedLists && data.emptyStateTemplate">
            <div class="empty-state-wrapper panel panel-default" ng-include="data.emptyStateTemplate"></div>
        </div>

        <div class="" ng-if="!data.f._view.length && data.hideRelatedLists && !data.emptyStateTemplate">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <span class="panel-title">{{data.f.title}}</span>
                    <span ng-if="::options.showFormView == 'true' && data.f.view != ''">[{{data.f.view_title}} view]</span>
                </div>
                <div class="panel-body wrapper-lg text-center">
                    ${No elements to display}
                </div>
            </div>
        </div>

        <!-- Bid Form -->
        <h1>Place a Bid</h1>
        <div class="panel panel-default">
            <div class="panel-body">
                <form id="bidForm" name="bidForm" ng-submit="submitBid()">
                    <div class="form-group">
                        <label for="bidder">Bidder:</label>
                        <input type="text" id="bidder" name="bidder" ng-model="bid.bidder" required>
                    </div>
                    <div class="form-group">
                        <label for="bidAmount">Bid Amount:</label>
                        <input type="number" id="bidAmount" name="bidAmount" ng-model="bid.bidAmount" required>
                    </div>
                    <div class="form-group">
                        <label for="itemName">Item Name:</label>
                        <input type="text" id="itemName" name="itemName" ng-model="bid.itemName" required>
                    </div>
                    <div class="form-group">
                        <label for="startBidAmount">Start Bid Amount:</label>
                        <input type="number" id="startBidAmount" name="startBidAmount" ng-model="bid.startBidAmount" required>
                    </div>
                    <div class="form-group">
                        <label for="highestBidAmount">Highest Bid Amount:</label>
                        <input type="number" id="highestBidAmount" name="highestBidAmount" ng-model="bid.highestBidAmount" required>
                    </div>
                    <button type="submit" class="btn btn-primary">Place Bid</button>
                </form>
            </div>
        </div>

        <!-- Existing ServiceNow conditionals continued -->
        <div ng-show="isPageReady && data.f.outOfScope" class="read-only-message">
            <div class="alert alert-info sp-cross-scope" role="alert">
                <p>${This record is in the <strong>{{data.f.recordScopeLabel}}</strong> application, but <strong>{{data.f.currentScopeLabel}}</strong> is the current application.}</p>
            </div>
        </div>

        <!-- Panel and form elements continued -->
        <div class="panel panel-default" ng-if="data.f._view.length || !data.hideRelatedLists">
            <div class="panel-heading">
                <span class="panel-title">{{data.f.title}}</span>
                <span ng-if="::options.showFormView == 'true' && data.f.view != ''">[{{data.f.view_title}} view]</span>
            </div>
            
        </div>

    </div>
</div>
]]></template>
    </sp_widget>
</record_update>
