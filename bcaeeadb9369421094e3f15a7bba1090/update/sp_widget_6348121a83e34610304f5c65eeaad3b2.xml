<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function ($scope, $element, $window, $location, $rootScope, $timeout, snAttachmentHandler, $http, spUtil, userPreferences, $filter, i18n, $uibModal, spAriaUtil) {
  // Many of these fields are more configuration-type fields than profile fields. We still want to display
  // these to a user who is configuring their 'settings', but we shouldn't show them on a user profile page.
  // We need to handle this better.
  var fieldExcludes = {
    sys_user: ['name', 'introduction', 'title', 'department', 'location', 'photo',
                'manager', 'company']
  }

  $scope.$watch('data.dateTimeFormat', function() {
    if ($scope.data.dateTimeFormat != g_user_date_time_format)
      $scope.data.dateTimeFormatChanged = true;
  });


  $scope.connectEnabled = function() {
    return $scope.data.connectEnabled && !$scope.data.isLoggedInUsersProfile;
  }


  $scope.getSysUserModelFields = function() {
    if ($scope.data.userExists) {
      return $scope.data.sysUserModelList
              .filter(function(field) {
                return $scope.displayField("sys_user", field.name);
              });
    }
    return [];
  }

  $scope.data.showAnalytics = $scope.data.analytics_enabled && $scope.data.sp_analytics_plugin_active && !NOW.user_impersonating && NOW.sp_analytics_portal_override != true;
  $scope.data.userPreferencesChanged = false;
  $scope.data.dateTimeFormatChanged = false;

  // get the list of values for a property using the concourse picker api (timezone, language)
  var getListValuesForProperty = function(endpoint, listProperty) {
    $http.get('/api/now/ui/concoursepicker/' + endpoint).then(function(response) {
      if (response && response.data && response.data.result && response.data.result.list) {
        if (!listProperty.list)
          listProperty.list = [];

        listProperty.list = response.data.result.list;
        if (response.data.result.current) {
          if (!listProperty.current)
            listProperty.current = {};
          listProperty.current = $filter('filter')(listProperty.list, {value: response.data.result.current}, true)[0];
        }
      }
    });
  };

  // list of user properties that are not user preferences
  $scope.data.listProperties = {
    timezone: {},
    encryption: {},
    language: {}
  }

  // initialize dropbox data
  getListValuesForProperty('timezone', $scope.data.listProperties.timezone);
  getListValuesForProperty('language', $scope.data.listProperties.language);
  getListValuesForProperty('encryption', $scope.data.listProperties.encryption);

  //set the user property
  $scope.setPreferenceValue = function(endpoint, value) {
    $http.put('/api/now/ui/concoursepicker/' + endpoint, {current : value, id: value}).then(function(response) {
      if (response && response.data && response.data.result) {
        $scope.data.userPreferencesChanged = true;
      }
    });
  }

  //set the user preference value
  $scope.setUserPreferenceValue = function(userProperty) {
    userPreferences.setPreference(userProperty.key, userProperty.value).then(function() {
          $scope.data.userPreferencesChanged = true;
    });
  };

  $scope.updateUserTracking = function(userProperty) {
    $scope.setUserPreferenceValue(userProperty);
    $scope.server.get({
      action: "update_session_tracking_info",
      user_tracking : userProperty.value
    }).then(function() {
      NOW.usage_tracking.usage_tracking_allowed_for_session = userProperty.value;
    });
  };

  $scope.toggle = function(e, userProperty) {
    if (e.type === 'keypress' && e.keyCode === 32) {
      userProperty.value = !userProperty.value;
      $scope.setUserPreferenceValue(userProperty);
    }
  }

  $scope.reloadPage = function() {
      $window.location.reload(true);
  };

  $scope.displayField = function(tableName, field, isHeader) {
    if (!isHeader && fieldExcludes[tableName].indexOf(field) > -1) return false;

    if (models[tableName][field] && models[tableName][field].type === "boolean") return false;

    if ($scope.data.isLoggedInUsersProfile) {
      if (models[tableName][field] && models[tableName][field].readonly)
        return models[tableName][field].displayValue;
      else
        return models[tableName][field];
    } else {
      return models[tableName][field] && models[tableName][field].displayValue;
    }
  }

  $scope.triggerMFAConfigurationModal = function() {
    $window.location = "?id=multi_factor_authentication";
  }

  $scope.triggerManageCertificatesModal = function() {
    $window.location = '?id=client_certificate_list&table=sys_user_certificate&filter=user=' + $scope.data.sysUserID;
  }

  $scope.triggerRegisterTrustedDevice = function() {
		$window.location = '?id=register_trusted_device';
	}
  $scope.openIdentityCenter = function() {
		$window.location = '/now/identity-center/home/' + encodeURIComponent($window.location.pathname + $window.location.search + $window.location.hash);
	}

  $scope.triggerCertificateConfigurationModal = function() {
        $scope.data.action = 'certRegister';
        $scope.server.update().then(function(response) {
            if (response.certHeader == 'false')
                spUtil.addErrorMessage($scope.data.certErrorMsg);
            else {
                var pageRoot = angular.element('.sp-page-root');
                $scope.certAuthModalModalInstance = $uibModal.open({
                    templateUrl: 'certAuthModalTemplate',
                    scope: $scope,
                    size: 'lg'
                });
                $scope.certAuthModalModalInstance.rendered.then(function() {
                    var h1 = angular.element('#certAuthModal');
                    var modal = h1.closest('div.modal');
                    modal.attr('aria-labelledby', 'certAuthModal');
                    pageRoot.attr('aria-hidden', 'true');
                });
                $scope.certAuthModalModalInstance.closed.then(function() {
                    pageRoot.attr('aria-hidden', 'false');
                });
            }
        });
        createCloseCertAuthModalHandler();
        }

  $scope.dismissCertAuthConfigurationModal = function() {
        $scope.certAuthModalModalInstance.close();
    }

  $scope.sysUserModelFields = $scope.getSysUserModelFields();

  function createCloseCertAuthModalHandler() {
        // This is a hack. Wait for the inner iframe to load, then mock
        // the GlideDialogWindow close function to do the right thing. If it's not ready
        // after a second, try again 9 more times. 
        var retryCount = 0;
        var maxRetries = 10;
        tryOverrideGlideDialogWindowClose();

        function tryOverrideGlideDialogWindowClose() {
            $timeout(function() {
                var frameGlideDialogWindow = document.getElementById('cert-auth-config-window').contentWindow['GlideDialogWindow'];
                if (!frameGlideDialogWindow) {
                    retryCount++;
                    if (retryCount >= maxRetries)
                        return;

                    tryOverrideGlideDialogWindowClose();
                    return;
                }

                frameGlideDialogWindow.get = function() {
                    return {
                        destroy: function() {
                            $scope.dismissCertAuthConfigurationModal();
                        }
                    }
                };
            }, 1000);
        }
    }
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.list-group-item {
  border: none;
  padding: 5px 15px;

  .btn-link {
  	padding-left: 0;
    padding-right: 0;
  }
}

.user-name {
  word-break: break-word;
}

.select2-container.select2-allowclear .select2-choice .select2-chosen {
  margin-right: 60px;
}

.mia i {
  font-size: 6rem;
}

.mia {
  color: #808080;
}

.popover {
  z-index: 1049;
}

.user-profile-container {
  width: 100%;
  max-width: 755px;
  margin: 0 auto;
  padding: 0 8px;
}
.input-switch input[type=checkbox]:checked ~ .switch {
	background-color: $brand-primary;
}

// accessible accessibility toggle
@media screen and (-ms-high-contrast: active) {
  .input-switch input.ng-not-empty+label.switch[for="accessibility-enabled"] {
    background-color: highlight;
    border: none;

    &amp;:before {
      background-color: highlightText;
    }
  }

  .input-switch input.ng-empty+label[for="accessibility-enabled"] {
    background-color: window;
    border: 1px solid windowText;

    &amp;:before {
      background-color: windowText;
    }
  }
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>cb_user_preferences</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Cb user preferences</name>
        <option_schema/>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function() {
    if (input && input.action === "update_session_tracking_info") {
    gs.getSession().putProperty("usage_tracking_allowed_for_session", input.user_tracking);
    return;
    
  }
  data.analytics_enabled = GlideProperties.getBoolean("glide.analytics.enabled");
  data.sp_analytics_plugin_active = GlidePluginManager.isActive('com.glide.service-portal.analytics');

  // populate the 'data' object
  // e.g., data.table = $sp.getValue('table');
  data.sysUserID = $sp.getParameter("sys_id");
  if (!data.sysUserID)
      data.sysUserID = gs.getUser().getID();
  var sysUserGR = new GlideRecord("sys_user");
  data.userExists = sysUserGR.get(data.sysUserID) && sysUserGR.canRead();

  if (data.userExists) {
    sysUserGR = GlideScriptRecordUtil.get(sysUserGR).getRealRecord();
    data.table = sysUserGR.getRecordClassName();
    data.name = sysUserGR.getValue("name");
    var loggedInSysUserID = gs.getUser().getID();
    data.connectEnabled = GlidePluginManager().isActive('com.glide.connect');
    data.liveProfileID = "";
    data.dateTimeFormat = gs.getDateTimeFormat();

    //get live profile id for sending connect messages
    if (GlidePluginManager().isActive('com.glideapp.live_common')) {
      var liveProfileGR = new GlideRecord("live_profile");
      liveProfileGR.addQuery("document", data.sysUserID);
      liveProfileGR.query();
      if (liveProfileGR.next()) {
        data.liveProfileID = liveProfileGR.getValue("sys_id");
        data.liveProfileModel = $sp.getForm("live_profile", data.liveProfileID)._fields;
        // live_profile short_description is shown here as "Bio", so popup label/hint must reflect that
        if (data.liveProfileModel.short_description) {
          data.liveProfileModel.short_description.label = gs.getMessage("Bio");
          data.liveProfileModel.short_description.hint = gs.getMessage("Biography");
        }
      } else
        data.connectEnabled = false; //can't find a live profile for this user, so lets not integrate Connect
    }

    data.isLoggedInUsersProfile = loggedInSysUserID.equals(data.sysUserID);
    var sysUserForm = $sp.getForm(data.table, data.sysUserID);
    data.sysUserView = sysUserForm._view;
    data.sysUserModel = sysUserForm._fields;
    data.sysUserModelList = [];



    //get state preferences
    data.preferencesEnabled = getPreferencesEnabled();

    //get the user Preferences of the user
    data.userPreferences = getUserPreferences(data.sysUserID);
  }

    //get the certificate header
    if (input.action == "certRegister") {
      var request = GlideTransaction.get().getRequest();
      var certHeader = request.getHeader("X-Client-Cert");
      if (!certHeader) {
        data.certHeader = "false";
        data.certErrorMsg = gs.getMessage("Failed to register PIV/CAC certificate to the user account. Please close your browser, ensure your card is inserted and try again");
      }	
    }


  // returns the user preferences from the platform
  function getUserPreferences(userID){
    var user = GlideUser.getUserByID(userID);
    return {
      accessibility: {
        key: 'glide.ui.accessibility',
        value: user.getPreference('glide.ui.accessibility') == 'true'
      },
      analytics: {
        key: 'enable_analytics',
        value: user.getPreference('enable_analytics') == 'true'
      }
    }
  }

  // read the proper state so we can show/hide preferences in the preferences table
  function getPreferencesEnabled() {
    var showEncryption = pm.isActive('com.glide.encryption') && 
        gs.getProperty('glide_encryption.cle_replatforming_with_kmf') !== 'opt_in' && 
        new SNC.ConcoursePickerGenerator().hasMultipleEncryptionChoices();
        
    //Enabling certificate based authentication per portal
    var portalRecord = $sp.getPortalRecord();
    if (portalRecord && (portalRecord.getValue('enable_certificate_based_authentication') == 1))
      var cert_based_auth = gs.getProperty('glide.authenticate.mutual.enabled', 'false') == 'true';

    return {
      // show preferences only if the sys_id of the url is the same user that is logged on
    preferencesPanelEnabled : GlideStringUtil.nil($sp.getParameter('sys_id')) || $sp.getParameter('sys_id') == gs.getUserID(),

      //certain properties are visible in some cases
      languageEnabled : pm.isActive('com.glide.i18n') && gs.getProperty('glide.ui.language_picker.enabled', 'true') == 'true',
      timezoneEnabled: gs.hasRole(gs.getProperty('glide.timezone_changer.roles')),
      encryptionEnabled: showEncryption,
      mfaEnabled: gs.getProperty('glide.authenticate.multifactor', "false") == "true",
      certAuthEnabled: cert_based_auth,
      trustedDeviceEnabled: gs.getProperty('glide.authenticate.preauth.allow.trusted.device', "false") == "true" && gs.getProperty('glide.authenticate.auth.policy.enabled', "false") == "true" && new GlideImpersonate().isImpersonating() == false,
      identityCenterEnabled : pm.isActive('com.snc.identity_center')
    }
  }
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>lalitha</sys_created_by>
        <sys_created_on>2024-07-24 14:59:12</sys_created_on>
        <sys_id>6348121a83e34610304f5c65eeaad3b2</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>Cb user preferences</sys_name>
        <sys_package display_value="CharityBids" source="x_1383184_charityb">bcaeeadb9369421094e3f15a7bba1090</sys_package>
        <sys_policy/>
        <sys_scope display_value="CharityBids">bcaeeadb9369421094e3f15a7bba1090</sys_scope>
        <sys_update_name>sp_widget_6348121a83e34610304f5c65eeaad3b2</sys_update_name>
        <sys_updated_by>lalitha</sys_updated_by>
        <sys_updated_on>2024-07-24 15:04:40</sys_updated_on>
        <template><![CDATA[<div class="default-focus-outline">
  <div ng-if="!data.userExists" class="panel panel-default">
      <div class="panel-body wrapper-lg text-center">
        <p>${Requested user not found}</p>
      </div>
  </div>
  <div ng-if="data.userExists">
    <div class="row" ng-if="data.preferencesEnabled.preferencesPanelEnabled">
      <div class="col-sm-12 col-xs-12">
        <div class="panel panel-default b">
          <div class="panel-heading">
            <h2 class="panel-title">
              <i class="fa fa-cog m-r-sm"></i>${User preferences}
            </h2>
          </div>
          <div class="body padder-xs">
            <div class="list-group">
              <div class="list-group-item">
                <label>${Accessibility enabled} </label>
                <div class="input-switch">
                  <input type="checkbox"
                         ng-change="setUserPreferenceValue(data.userPreferences.accessibility)"
                         ng-model="data.userPreferences.accessibility.value"
                         name="accessibility-enabled" id="accessibility-enabled" aria-label="${Accessibility enabled}" role="switch" ng-attr-aria-checked="{{ data.userPreferences.accessibility.value }}"/>
                  <label class="switch" for="accessibility-enabled" ng-click="toggle($event, data.userPreferences.accessibility)" role="presentation" aria-hidden="true">
                    <span class="sr-only">${Accessibility enabled}</span>
                  </label>
                </div>
              </div>
              <div class="list-group-item" ng-if="data.showAnalytics">
                <label>${Enable Analytics} </label>
                <div class="input-switch">
                  <input type="checkbox"
                         ng-change="updateUserTracking(data.userPreferences.analytics)"
                         ng-model="data.userPreferences.analytics.value"
                         name="analytics-enabled" id="analytics-enabled" aria-label="${Enable Analytics}" role="switch" ng-attr-aria-checked="{{ data.userPreferences.analytics.value }}"/>
                  <label class="switch" for="analytics-enabled" ng-click="toggle($event, data.userPreferences.analytics)" role="presentation" aria-hidden="true">
                    <span class="sr-only">${Enable Analytics}</span>
                  </label>
                </div>
              </div>
              <div class="list-group-item" ng-if="data.preferencesEnabled.timezoneEnabled">
                <label for="time_zone_picker_select">${Time zone}</label>
                <select id="time_zone_picker_select" class="form-control "
                        name="time_zone_picker_select" ng-model="data.listProperties.timezone.current"
                        ng-change="setPreferenceValue('timezone', data.listProperties.timezone.current.value)"
                        ng-options="item as item.label for item in data.listProperties.timezone.list track by item.value"></select>
              </div>
              <div class="list-group-item" ng-if="data.preferencesEnabled.languageEnabled">
                <label for="language_picker_select">${Language}</label>
                <select id="language_picker_select" class="form-control"
                        name="language_picker_select" ng-model="data.listProperties.language.current"
                        ng-change="setPreferenceValue('language', data.listProperties.language.current.value)"
                        ng-options="item as item.label for item in data.listProperties.language.list track by item.value"></select>
              </div>
              <div class="list-group-item" ng-if="data.preferencesEnabled.encryptionEnabled">
                <label for="encryption_picker_select">${Encryption}</label>
                <span class="fa fa-lock"></span>
                <select id="encryption_picker_select" class="form-control"
                        name="encryption_picker_select" ng-model="data.listProperties.encryption.current"
                        ng-change="setPreferenceValue('encryption', data.listProperties.encryption.current.value)"
                        ng-options="item as item.label for item in data.listProperties.encryption.list "></select>
              </div>
              <div class="list-group-item" ng-if="data.preferencesEnabled.mfaEnabled">
                <button class="btn btn-link" ng-click="triggerMFAConfigurationModal()" aria-haspopup="dialog">${Configure Multi-Factor Authentication}</button>
              </div>
              <div class="list-group-item" ng-if="data.preferencesEnabled.certAuthEnabled">
                <button class="btn btn-link" ng-click="triggerCertificateConfigurationModal()" aria-haspopup="dialog">${Register your client certificate}</button>
              </div>
              <div class="list-group-item" ng-if="data.preferencesEnabled.certAuthEnabled">
                <button class="btn btn-link" ng-click="triggerManageCertificatesModal()" aria-haspopup="dialog">${Manage your client certificates}</button>
              </div>
              <div class="list-group-item" ng-if="data.preferencesEnabled.trustedDeviceEnabled">
                <button class="btn btn-link" ng-click="triggerRegisterTrustedDevice()" aria-haspopup="dialog">${Register Trusted Device}</button>
              </div>
             <div class="list-group-item" ng-if="data.preferencesEnabled.identityCenterEnabled">
                <button class="btn btn-link" ng-click="openIdentityCenter()" aria-role="link">${View Identity Center}</button>
              </div>
            </div>
          </div>
          <div class="panel-footer clearfix" ng-if="data.userPreferencesChanged">
            <a id="refresh-to-see-changes" href="javascript:void(0)"
               ng-click="reloadPage()" class="pull-right btn btn-primary"><i class="fa fa-refresh m-r-sm" aria-hidden="true"></i>${Refresh to see changes}</a>
          </div>
        </div>
      </div>
      <script type="text/ng-template" id="certAuthModalTemplate">
        <div>
          <div class="modal-header">
            <h1 class="h4 modal-title" id="certAuthModal" style="display: inline-block">${PIV/CAC Certificate Found}</h1>
            <i class="fa fa-close pull-right text-base" tabindex="0" ng-click="dismissCertAuthConfigurationModal()" aria-label="${Close dialog}" role="button"></i>
          </div>
          <div class="modal-body">
          	<iframe id="cert-auth-config-window" src="/cert_confirm_page.do" width="100%" height="240px" frameBorder="0"></iframe>
          </div>
          
        </div>
      </script>
    </div>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
